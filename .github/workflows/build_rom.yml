name: Build and Package ROM

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Triggers the workflow on push or pull request events but only for the develop branch
  # push:
  #   branches: [ develop ]
  # pull_request:
  #   branches: [ develop ]

jobs:
  build:
    runs-on: ${{ matrix.os }}  
    strategy:
      matrix:       
        include:
          - os: ubuntu-20.04
            name: Linux-x64
    steps:

      # ==== OS Specific Dependencies ====
      - name: Linux Depends
        if: matrix.name == 'Linux-x64'
        run: |
          # Pull in RGBDS-0.6.1
          curl -Lo rgbds-0.6.1.tar.gz https://github.com/gbdev/rgbds/releases/download/v0.6.1/rgbds-0.6.1.tar.gz
          tar xvfz rgbds-0.6.1.tar.gz
          cd rgbds
          make
      # ==== Build Steps ====
      - name: Check out Source
        uses: actions/checkout@v2
        with:
          path: pokecrystal-mobile-en
          submodules: false

      # ==== Pre-Build: Set environment vars ====
      # Needs to be in a separate step than build so that setting the environment var takes effect
      #
      - name: Pre-Build Linux
        if: (matrix.name == 'Linux-x64')
        shell: bash
        run: |
          echo "BUILD_PACKAGE_FILENAME=gb_photo.zip" >> $GITHUB_ENV
      # ==== Build ====
      - name: Build GBDK-2020 Linux
        if: (matrix.name == 'Linux-x64')
        shell: bash
        run: |
          export GBDK_HOME=`pwd`/gbdk/
          cd gb-photo
          make
          cd ..
      # ==== Packaging ====
      - name: Package build Linux/MacOS
        if: (matrix.name == 'Linux-x64')
        shell: bash
        run: |
          ls -la gb-photo/build
          ls -la gb-photo/build/gb
          ls -la gb-photo/build/gbc
          # Remove debug artifacts
          rm -f gb-photo/build/gb/*.noi gb-photo/build/gb/*.map gb-photo/build/gb/*.sym gb-photo/build/gb/*.ihx
          rm -f gb-photo/build/gbc/*.noi gb-photo/build/gbc/*.map gb-photo/build/gbc/*.sym gb-photo/build/gbc/*.ihx
          ls -la gb-photo/build
          ls -la gb-photo/build/gb
          ls -la gb-photo/build/gbc
          # Don't use zip in linux since github will created a double nested zip
          # 7z a ${{ env.BUILD_PACKAGE_FILENAME }} *.gb
      - name: Store build
        if: (matrix.name == 'Linux-x64')
        uses: actions/upload-artifact@v2
        with:
          name: GB Photo! ROM Build
          # path: gb-photo/build/gb/${{ env.BUILD_PACKAGE_FILENAME }}
          path: gb-photo/build
          # retention-days: 14
